#-----------------------------------------------------------------------------
# Copyright (c) 1995 Regents of the University of Michigan.
# All rights reserved.
#
# Redistribution and use in source and binary forms are permitted
# provided that this notice is preserved and that due credit is given
# to the University of Michigan at Ann Arbor. The name of the University
# may not be used to endorse or promote products derived from this
# software without specific prior written permission. This software
# is provided ``as is'' without express or implied warranty.
#
#       Stand alone LDAP server tools makefile
#
#-----------------------------------------------------------------------------
HAVE_ISODE = @HAVE_ISODE@
BUILD_LDBM = @BUILD_LDBM@

EDB2LDIFSRCS	= edb2ldif.c ldapsyntax.c
EDB2LDIFOBJS	= edb2ldif.o ldapsyntax.o ../strdup.o

OBJS2	= ../config.o ../ch_malloc.o ../backend.o ../charray.o \
		../aclparse.o ../schema.o ../result.o ../filterentry.o \
		../acl.o ../phonetic.o ../attr.o ../value.o ../entry.o \
		../dn.o ../filter.o ../str2filter.o ../ava.o ../init.o \
		../schemaparse.o ../regex.o ../strdup.o

LDAP_LIBS = -lldif -lldap -llber -lldbm -lavl -llthread $(LIBDB)

all:	build-edb2ldif ldif2index ldif2ldbm ldbmcat ldif2id2entry \
		ldif2id2children centipede ldbmtest ldif

build-edb2ldif:	FORCE
	@if [ "$(HAVE_ISODE)" = "yes" ]; then \
	    	$(MAKE) $(MFLAGS) edb2ldif; \
        else \
            echo "run configure with --with-isode to build edb2ldif"; \
        fi

edb2ldif:	edb2-vers.o
	$(CC) $(LDFLAGS) -o $@ $(EDB2LDIFOBJS) edb2-vers.o $(LIBS)

edb2-vers.c: $(EDB2LDIFOBJS)
	$(RM) $@
	(u=$${USER-root} v=`$(CAT) $(VERSIONFILE)` d=`$(PWD)` h=`$(HOSTNAME)` \
	t=`$(DATE)`; $(SED) -e "s|%WHEN%|$${t}|" \
	-e "s|%WHOANDWHERE%|$${u}@$${h}:$${d}|" \
	-e "s|%VERSION%|$${v}|" \
	< Vers-edb2.c > $@)

build-chlog2replog: FORCE
	@if [ "$(HAVE_ISODE)" = "yes" ]; then \
	    	$(MAKE) $(MFLAGS) chlog2replog; \
        else \
            echo "run configure with --with-isode to build chlog2replog"; \
        fi

chlog2replog: chlog2replog.o ../lock.o ../ch_malloc.o
	$(CC) $(LDFLAGS) -o $@ chlog2replog.o ../lock.o ../ch_malloc.o $(LIBS)

ldif2index:	ldif2index.o ../libbackends.a $(OBJS2)
	$(CC) $(LDFLAGS) -o $@ ldif2index.o $(OBJS2) ../libbackends.a $(LIBS)

ldif2ldbm:	ldif2ldbm.o ../libbackends.a $(OBJS2)
	$(CC) $(LDFLAGS) -o $@ ldif2ldbm.o $(OBJS2) ../libbackends.a $(LIBS)

ldif2id2entry:	ldif2id2entry.o ../libbackends.a $(OBJS2)
	$(CC) $(LDFLAGS) -o $@ ldif2id2entry.o $(OBJS2) ../libbackends.a $(LIBS)

ldif2id2children:	ldif2id2children.o ../libbackends.a $(OBJS2)
	$(CC) $(LDFLAGS) -o $@ ldif2id2children.o $(OBJS2) ../libbackends.a $(LIBS)

ldbmcat:	ldbmcat.o
	$(CC) $(LDFLAGS) -o $@ ldbmcat.o $(LIBS)

ldif:		ldif.o
	$(CC) $(LDFLAGS) -o $@ ldif.o $(LIBS) $(LIBS2)

centipede:	centipede.o 
	$(CC) -o $@ centipede.o $(LIBS) $(KRBLIBFLAG) $(KRBLIBS)

sizecount:	sizecount.o ../phonetic.o ../ch_malloc.o
	$(CC) $(LDFLAGS) -o $@ sizecount.o ../phonetic.o ../ch_malloc.o \
		$(LIBS) $(KRBLIBFLAG) $(KRBLIBS)

ldbmtest:	ldbmtest.o ../libbackends.a $(OBJS2)
	$(CC) $(LDFLAGS) -o ldbmtest ldbmtest.o $(OBJS2) ../libbackends.a $(LIBS)

install: $(ETCDIR) $(ETCDIR)/edb2ldif $(ETCDIR)/ldif2ldbm \
	$(ETCDIR)/ldif2index $(ETCDIR)/ldif2id2entry \
	$(ETCDIR)/ldif2id2children $(ETCDIR)/ldbmcat \
	$(ETCDIR)/centipede $(ETCDIR)/ldbmtest \
	$(ETCDIR)/ldif

$(ETCDIR)/edb2ldif:	build-edb2ldif
	@if [ "$(HAVE_ISODE)" = "yes" ]; then \
		$(INSTALL) $(INSTALLFLAGS) -m 755 edb2ldif $(ETCDIR); \
	else \
		exit 0; \
	fi

$(ETCDIR)/chlog2replog:	build-chlog2replog
	@if [ "$(HAVE_ISODE)" = "yes" ]; then \
		$(INSTALL) $(INSTALLFLAGS) -m 755 chlog2replog $(ETCDIR); \
	else \
		exit 0; \
	fi

$(ETCDIR)/ldif2ldbm:	ldif2ldbm
	$(INSTALL) $(INSTALLFLAGS) -m 755 ldif2ldbm $(ETCDIR)

$(ETCDIR)/ldif2index:	ldif2index
	$(INSTALL) $(INSTALLFLAGS) -m 755 ldif2index $(ETCDIR)

$(ETCDIR)/ldif2id2entry:	ldif2id2entry
	$(INSTALL) $(INSTALLFLAGS) -m 755 ldif2id2entry $(ETCDIR)

$(ETCDIR)/ldif2id2children:	ldif2id2children
	$(INSTALL) $(INSTALLFLAGS) -m 755 ldif2id2children $(ETCDIR)

$(ETCDIR)/ldbmcat:	ldbmcat
	$(INSTALL) $(INSTALLFLAGS) -m 755 ldbmcat $(ETCDIR)

$(ETCDIR)/ldif:	ldif
	$(INSTALL) $(INSTALLFLAGS) -m 755 ldif $(ETCDIR)

$(ETCDIR)/centipede:	centipede
	$(INSTALL) $(INSTALLFLAGS) -m 755 centipede $(ETCDIR)

$(ETCDIR)/ldbmtest:	ldbmtest
	$(INSTALL) $(INSTALLFLAGS) -m 755 ldbmtest $(ETCDIR)

lint:	FORCE
	$(LINT) $(INCLUDES) $(DEFINES) $(SRCS)

5lint:	FORCE
	$(5LINT) $(INCLUDES) $(DEFINES) $(SRCS)

clean:	FORCE
	@echo "making clean in `$(PWD)`"
	$(RM) edb2ldif ldif2index *.o core a.out edb2-vers.c \
		ldif2ldbm ldif2id2entry ldif2id2children ldbmcat ldif \
		centipede chlog2replog sizecount ldif2ldbm.sed.c ldbmtest

depend:	ldif2ldbm.sed.c FORCE
	@if [ ! -z "$(HAVE_ISODE)" ]; then \
	    DEPENDEXTRAS="$(ISODEINCLUDEFLAG) chlog2replog.c $(EDB2LDIFSRCS)"; \
	fi; \
	$(MKDEP) $(INCLUDES) $(DEFINES) $$DEPENDEXTRAS ldif2index.c \
	    ldif2ldbm.c ldif2id2entry.c ldif2id2children.c ldbmcat.c \
	    centipede.c sizecount.c ldif2ldbm.sed.c ldbmtest.c ldif.c

links:
	@echo "making links in `$(PWD)`"
	@$(LN) .src/*.[ch] .
